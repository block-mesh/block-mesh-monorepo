// A static import is required in b/g scripts because they are executed in their own env
// not connected to the content scripts where wasm is loaded automatically
import initWasmModule, {task_poller, report_uptime, uptime_fetcher} from './wasm/blockmesh_ext.js';

const PING_INTERVAL = 3 * 1000;

// This keeps the service worker alive
function stayAlive() {
    chrome.runtime.sendMessage("ping");
}

setInterval(() => {
    stayAlive();
}, PING_INTERVAL);


console.log("Background script started");

// console.log(await chrome.permissions.getAll());

// run the wasm initializer before calling wasm methods
// the initializer is generated by wasm_pack
(async () => {
    await initWasmModule();
    setInterval(async () => {
        await task_poller().then(onSuccess, onError);
    }, 30_000 + Math.random());
    setInterval(async () => {
        await report_uptime().then(onSuccess, onError);
    }, 30_000 + Math.random());
    setInterval(async () => {
        await uptime_fetcher().then(onSuccess, onErrorWithLog);
    }, 30_000 + Math.random());
})();

// A placeholder for OnSuccess in .then
function onSuccess(message) {
    // console.log(`Background::Send OK: ${JSON.stringify(message)}`);
}

// A placeholder for OnError in .then
function onError(error) {
    console.error(`Background::Promise error: ${error}`);
}

// A placeholder for OnError in .then
function onErrorWithLog(error) {
    console.error(`Background::Promise error: ${error}`);
}

// Popup button handler
// Fetches the data from Spotify using the creds extracted earlier
chrome.runtime.onMessage.addListener(async (request, sender, sendResponse) => {
    console.log(`Popup message received: ${JSON.stringify(request)}, ${JSON.stringify(sender)}`);
    return true;
    // chrome.runtime.sendMessage("Missing how many tracks to add param. It's a bug.").then(onSuccess, onError);
});