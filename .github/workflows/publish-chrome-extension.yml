name: Update Chrome Extension
permissions:
  contents: "write"
on:
  push:
    branches:
      - fix-version
  #workflow_run:
  #  workflows: ["Tag"]
  #  types:
  #    - "completed"
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  get-tag:
    name: "Get Tag From Package Version"
    runs-on: "ubuntu-latest"
    outputs:
      pkg-version: ${{ steps.pkg-version.outputs.PKG_VERSION }}
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ vars.RUSTC_VERSION }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: release-tag-extension
          cache-all-crates: true
      - name: "Get tag"
        id: "pkg-version"
        shell: "bash"
        run: |
          echo PKG_VERSION=$(grep -m 1 '^version' Cargo.toml | sed -e 's/^version\s*=\s*//' | sed -e 's/"//g') >> $GITHUB_OUTPUT
  build-chrome-extension:
    name: Build Chrome extension artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ vars.RUSTC_VERSION }}
          components: cargo , clippy , rust-docs , rust-std , rustc , rustfmt
          targets: wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v2
        with:
          key: build-extension
          cache-all-crates: true
      - name: Install wasm-pack
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq zip
          cargo install wasm-pack --locked
      - name: Build
        run: |
          ./scripts/wasm_build.sh --release
          cp tmp_ext/chrome/chrome.zip chrome-extension-${{ github.event.pull_request.head.sha }}.zip
      - name: Check Chrome Store
        run: |
          PKG_VERSION=$(grep -m 1 '^version' Cargo.toml | sed -e 's/^version\s*=\s*//' | sed -e 's/"//g')

          mkdir -p ext-temp
          curl -L  -o ext-temp/tmp.zip "https://clients2.google.com/service/update2/crx?response=redirect&prodversion=${{ vars.CHROME_PRODVERSION }}&acceptformat=crx2,crx3&x=id%3D${{ vars.EXTENSION_ID }}%26uc"
          cd ext-temp && unzip tmp.zip
          STORE_VERSION=$(cat manifest.json| jq '.version')
          
          RESPONSE=$(curl -X POST https://www.googleapis.com/oauth2/v4/token \
          -d client_id=${{ secrets.CI_GOOGLE_CLIENT_ID }} \
          -d client_secret=${{ secrets.CI_GOOGLE_CLIENT_SECRET }} \
          -d refresh_token=${{ secrets.CI_GOOGLE_REFRESH_TOKEN }} \
          -d grant_type=refresh_token)
          
          ACCESS_TOKEN=$(echo $RESPONSE | jq -r '.access_token')

          RESPONSE_2=$(curl -X GET \
          -H 'x-goog-api-version: 2' \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          "https://www.googleapis.com/chromewebstore/v1.1/items/${{ vars.EXTENSION_ID }}?projection=DRAFT")
          
          PENDING_VERSION=$(echo -E $RESPONSE_2 | jq '.crxVersion')
          LATEST=$(printf "${PKG_VERSION}\n${STORE_VERSION}5\n${PENDING_VERSION}\n' | sort -V | head -n 1)

      #          if [ "${STORE_VERSION}" != "${LATEST}" ]; then
      #            echo "Version mismatch: ${STORE_VERSION} != ${LATEST}"
      #            exit 1
      #          fi

      - name: Archive chrome-extension artifact
        uses: actions/upload-artifact@v3
        with:
          name: chrome-extension-${{ github.sha }}
          path: chrome-extension-${{ github.event.pull_request.head.sha }}.zip
  # api usage reference:
  # * <https://developer.chrome.com/docs/webstore/using_webstore_api/>
  # * <https://github.com/fregante/chrome-webstore-upload/blob/main/How%20to%20generate%20Google%20API%20keys.md>
  upload-extension:
    name: Upload extension
    runs-on: ubuntu-latest
    needs: build-chrome-extension
    env:
      # you can optionally specify extension ID here, we do this so that
      # all of our environments (dev, staging, prod) have a consistent ID
      # we can reference. Otherwise the extension ID is autogenerated.
      EXTENSION_ID: ${{ vars.EXTENSION_ID }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Download bundle artifact
        uses: actions/download-artifact@v3
        with:
          name: chrome-extension-${{ github.sha }}
      - name: Install webstore cli
        run: |-
          npm install -g chrome-webstore-upload-cli
      # - name: Upload step
      #   run: |-
      #     chrome-webstore-upload upload \\
      #       --source chrome-extension-${{ github.event.pull_request.head.sha }}.zip \\
      #       --extension-id ${{ env.EXTENSION_ID }} \\
      #       --client-id ${{ secrets.CI_GOOGLE_CLIENT_ID }} \\
      #       --client-secret ${{ secrets.CI_GOOGLE_CLIENT_SECRET }} \\
      #       --refresh-token ${{ secrets.CI_GOOGLE_REFRESH_TOKEN }}
# https://jam.dev/blog/automating-chrome-extension-publishing/