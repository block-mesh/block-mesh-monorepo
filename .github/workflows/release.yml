name: Release
permissions:
  contents: "write"
on:
  workflow_run:
    workflows: ["Tag"]
    types:
      - "completed"
jobs:
  get-tag:
    name: "Get Tag From Package Version"
    runs-on: "ubuntu-latest"
    outputs:
      pkg-version: ${{ steps.pkg-version.outputs.PKG_VERSION }}
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ vars.RUSTC_VERSION }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: release-tag
          cache-all-crates: true
      - name: "Get tag"
        id: "pkg-version"
        shell: "bash"
        run: |
          echo PKG_VERSION=$(grep -m 1 '^version' Cargo.toml | sed -e 's/^version\s*=\s*//' | sed -e 's/"//g') >> $GITHUB_OUTPUT
  create-release:
    name: "Create release"
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: "get-tag"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4
      - name: "Cache"
        uses: Swatinem/rust-cache@v2
        with:
          key: release-build
          cache-all-crates: true
      - name: "Create release"
        uses: "taiki-e/create-gh-release-action@v1"
        with:
          # (optional) Path to changelog.
          # changelog: CHANGELOG.md
          branch: "master"
          ref: refs/tags/v${{ needs.get-tag.outputs.pkg-version }}
          token: ${{ secrets.GITHUB_TOKEN }}
  upload-assets:
    name: "Upload assets to Github releases"
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs:
      - "get-tag"
      - "create-release"
    strategy:
      matrix:
        include:
          - target: "x86_64-unknown-linux-gnu"
            os: "ubuntu-latest"
          - target: "x86_64-unknown-linux-musl"
            os: "ubuntu-latest"
          - target: "aarch64-unknown-linux-gnu"
            os: "ubuntu-latest"
          - target: "aarch64-unknown-linux-musl"
            os: "ubuntu-latest"
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4
      - name: "Cache"
        uses: Swatinem/rust-cache@v2
        with:
          key: release-upload
          cache-all-crates: true
      - name: "Upload Binaries"
        uses: "taiki-e/upload-rust-binary-action@v1"
        with:
          bin: "block-mesh-manager"
          target: ${{ matrix.target }}
          archive: $bin-${{ matrix.target }}
          ref: refs/tags/v${{ needs.get-tag.outputs.pkg-version }}
          token: ${{ secrets.GITHUB_TOKEN }}
  push-to-registry:
    name: "Push Docker image to Docker Hub"
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs:
      - "get-tag"
      - "upload-assets"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4
      - name: "Cache"
        uses: Swatinem/rust-cache@v2
        with:
          key: release-push
          cache-all-crates: true
      - name: "Log in to Docker Hub"
        uses: "docker/login-action@v3"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: "Extract metadata (tags, labels) for Docker"
        id: "meta"
        uses: "docker/metadata-action@v5"
        with:
          images: "blockmesh/block-mesh-manager"
      - name: "Build and push Docker image"
        uses: "docker/build-push-action@v5"
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: block-mesh-manager.Dockerfile
          push: true
          tags: blockmesh/block-mesh-manager:latest,blockmesh/block-mesh-manager:v${{ needs.get-tag.outputs.pkg-version }}
          labels: ${{ steps.meta.outputs.labels }}
  publish-to-heroku:
    needs:
      - "push-to-registry"
    name: "Publish to Heroku"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "Cache"
        uses: Swatinem/rust-cache@v2
        with:
          key: release-deploy
          cache-all-crates: true
      - name: "Log in to Docker Hub"
        uses: "docker/login-action@v3"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: "Deploy to Heroku"
        run: |
          docker pull blockmesh/block-mesh-manager:latest
          docker latest blockmesh/block-mesh-manager:tag registry.heroku.com/block-mesh-manager/web
          docker push registry.heroku.com/block-mesh-manager/web
          heroku container:release web -a block-mesh-manager
# https://codingpackets.com/blog/rust-binary-and-docker-releases-using-github-actions/